from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import app.keyboards as keyboards

from services.buyer.index import buyer

router = Router()


class Cargo(StatesGroup):
    price = State()
    price_per_kilogram = State()
    package = State()  # todo


class Help(StatesGroup):
    text = State()
    contact = State()


class Retail(StatesGroup):
    expected_price = State()
    calc_price = State()


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ö–∏—Ç–∞–µ–º. "
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –ö–∏—Ç–∞—è, –ø—Ä–æ—Å—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫—É, "
        "–∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ—á—å —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboards.main
    )


@router.message(F.text == "–†–æ–∑–Ω–∏—Ü–∞")
async def route(message: Message):
    text = (
        '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø–æ—Å—ã–ª–∫–∏.\n\nüö´ <strong>–í–∞–∂–Ω–æ!!!</strong> üö´\n'
        '–ù–µ–±–æ–ª—å—à–∏–º–∏ –ø–æ—Å—ã–ª–∫–∞–º–∏ –ù–ï –û–¢–ü–†–ê–í–õ–Ø–ï–ú:\n'
        '<b>-</b> –•—Ä—É–ø–∫–∏–µ, –ª–µ–≥–∫–æ-–≤–æ—Å–ø–ª–∞–º–µ–Ω—è—é—â–∏–µ—Å—è –≥—Ä—É–∑—ã\n'
        '<b>-</b> üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É\n'
        '<b>-</b> üß¥ –ü–æ—Ä–æ—à–∫–∏\n'
        '<b>-</b> üß™ –•–∏–º–∏—é\n'
        '<b>-</b> üíß –ñ–∏–¥–∫–æ—Å—Ç–∏\n\n'
        '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª—ã <strong>"–ö–∞—Ä–≥–æ (—Å–∞–º–æ–≤—ã–∫—É–ø) - –æ—Ç 5 –∫–≥"</strong> '
        '–∏–ª–∏ <strong>"–£—Å–ª—É–≥–∏ –±–∞–π–µ—Ä–∞ (–æ–ø—Ç)"</strong>.\n'
        '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ - –≤—Å–µ–≥–æ 1000 —Ä.'
    )
    await message.answer(text, reply_markup=keyboards.retail1, parse_mode="html")


@router.callback_query(F.data == "retail/1/countinue")
async def route(callback: CallbackQuery):
    text = (
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ: <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ + –¥–æ—Å—Ç–∞–≤–∫–∞</b>.\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è 600 —Ä—É–± –∑–∞ 1 –∫–≥.\n–ü—Ä–∏–º–µ—Ä: –≤–µ—Å —à–∞—Ä—Ñ–∞ 150 –≥—Ä–∞–º–º –∑–Ω–∞—á–∏—Ç:  0,150 * 600 = 90 —Ä—É–±. "
        "–∑–∞ —à–∞—Ä—Ñ.\n\n<strong>–í–∞–∂–Ω–æ</strong> ‚òùüèª üõë\n–§–∏–Ω–∞–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–µ—Å—É –º—ã –ø–æ–ª—É—á–∞–µ–º –∫–æ–≥–¥–∞ "
        "—Ç–æ–≤–∞—Ä –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ –º–Ω–µ: —è –µ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞—é –∏ —Å–æ–æ–±—â–∞—é —Å–∫–æ–ª—å–∫–æ –∫ –æ–ø–ª–∞—Ç–µ –∑–∞ –≤–µ—Å –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è "
        "–æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –°–î–ï–ö."
    )
    await callback.message.answer(text, reply_markup=keyboards.retail2, parse_mode="html")


@router.callback_query(F.data == "retail/2/price")
async def route(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Retail.expected_price)
    text = (
        '<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π –ø–æ–∫—É–ø–∫–∏ (–≤ —é–∞–Ω—è—Ö)</b>.\n–ü—Ä–∏–º–µ—Ä: —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ 150 ¬•, –∑–Ω–∞—á–∏—Ç –≤–∞–º –Ω—É–∂–Ω–æ '
        '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "150". –î–∞–ª–µ–µ –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å % üôå'
    )
    await callback.message.answer(text, parse_mode="html")
    await state.set_state(Retail.expected_price)


@router.message(Retail.expected_price)
async def route(message: Message, state: FSMContext):
    await state.update_data(expected_price=message.text)
    text = f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ <i>(–±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏)</i>: {2222} ‚ÇΩ"
    await message.answer(text, reply_markup=keyboards.retail3, parse_mode="html")


@router.callback_query(F.data == "retail/3/delivery")
async def route(callback: CallbackQuery):
    text = (
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è 600 —Ä—É–± –∑–∞ 1 –∫–≥.\n–ü—Ä–∏–º–µ—Ä: –≤–µ—Å —à–∞—Ä—Ñ–∞ 150 –≥—Ä–∞–º–º –∑–Ω–∞—á–∏—Ç:  0,150 * 600 = 90 —Ä—É–±. "
        "–∑–∞ —à–∞—Ä—Ñ.\n\n<strong>–í–∞–∂–Ω–æ</strong> ‚òùüèª üõë\n–§–∏–Ω–∞–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–µ—Å—É –º—ã –ø–æ–ª—É—á–∞–µ–º –∫–æ–≥–¥–∞ "
        "—Ç–æ–≤–∞—Ä –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ –º–Ω–µ: —è –µ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞—é –∏ —Å–æ–æ–±—â–∞—é —Å–∫–æ–ª—å–∫–æ –∫ –æ–ø–ª–∞—Ç–µ –∑–∞ –≤–µ—Å –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è "
        "–æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –°–î–ï–ö."
    )
    await callback.message.answer(text, parse_mode="html")


@router.callback_query(F.data == "retail/3/all")
async def route(callback: CallbackQuery):
    text = (
        "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑ —É—Ö–æ–¥–∏—Ç –≤ —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É.\n\n–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –æ—Ç–≤–µ—Ç–Ω—ã–º "
        "—Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ <b>- —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞</b> –ò–õ–ò <b>- —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–π –ø–æ—Å—Ç —Å "
        "—Ç–æ–≤–∞—Ä–æ–º –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ –∏–ª–∏ —Ç–≥</b>.\n\n–¢–ê–ö–ñ–ï –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–∏—Å–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞ –∫ –∑–∞–∫–∞–∑—É: "
        "<b>–¶–í–ï–¢/–†–ê–ó–ú–ï–†/–ö–û–õ–ò–ß–ï–°–¢–í–û</b>."
    )
    await callback.message.answer(text, reply_markup=keyboards.retail4, parse_mode="html")


@router.callback_query(F.data == "retail/4/link")
async def route(callback: CallbackQuery):
    text = (
        "–ù–∞ –∫–∞–∂–¥–æ–π –∫–∏—Ç–∞–π—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∫–µ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞, –∂–º–∏ –Ω–∞ –Ω–µ–µ, –≤—ã–±–∏—Ä–∞–π ¬´—Å–∫—Ä–µ–ø–∫—É¬ª "
        "–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ üôå."
    )
    await callback.message.answer(text, parse_mode="html")


@router.callback_query(F.data == "retail/2/delivery")
async def route(callback: CallbackQuery):
    text = (
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è 600 —Ä—É–± –∑–∞ 1 –∫–≥.\n–ü—Ä–∏–º–µ—Ä: –≤–µ—Å —à–∞—Ä—Ñ–∞ 150 –≥—Ä–∞–º–º –∑–Ω–∞—á–∏—Ç:  0,150 * 600 = 90 —Ä—É–±. "
        "–∑–∞ —à–∞—Ä—Ñ.\n\n<strong>–í–∞–∂–Ω–æ</strong> ‚òùüèª üõë\n–§–∏–Ω–∞–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–µ—Å—É –º—ã –ø–æ–ª—É—á–∞–µ–º –∫–æ–≥–¥–∞ "
        "—Ç–æ–≤–∞—Ä –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ –º–Ω–µ: —è –µ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞—é –∏ —Å–æ–æ–±—â–∞—é —Å–∫–æ–ª—å–∫–æ –∫ –æ–ø–ª–∞—Ç–µ –∑–∞ –≤–µ—Å –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è "
        "–æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –°–î–ï–ö."
    )
    await callback.message.answer(text, parse_mode="html")


@router.message(F.text == "–£—Å–ª—É–≥–∏ –±–∞–π–µ—Ä–∞ (–æ–ø—Ç)")
async def route(message: Message):
    text = buyer()
    await message.answer(text, reply_markup=keyboards.main, parse_mode="html")


@router.message(F.text == "–ö–∞—Ä–≥–æ (—Å–∞–º–æ–≤—ã–∫—É–ø) - –æ—Ç 5 –∫–≥")
async def route(message: Message):
    text = (
        "–ü—Ä–∏ —Å–∞–º–æ–≤—ã–∫—É–ø–µ –≤—ã <b>–°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–û</b> –ø–æ–∫—É–ø–∞–µ—Ç–µ —Ç–æ–≤–∞—Ä—ã —É –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–ª–∏ –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö "
        "–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö (1688, Made-In-China, taobao, pingduoduo –∏ —Ç–¥) –∏ –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –≥—Ä—É–∑–∞ –¥–æ —Å–∫–ª–∞–¥–∞ –∫–∞—Ä–≥–æ "
        "–≤ –≥ –ò—É –∏–ª–∏  –ì—É–∞–Ω—á–∂–æ—É (–Ω–∞ –≤—ã–±–æ—Ä)."
        "\n\n–†–µ—à–µ–Ω–∏–µ –í–°–ï–• –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º (–ø–æ—á–µ–º—É –≤–∞—à —Ç–æ–≤–∞—Ä –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω / –µ—â–µ –Ω–µ –¥–æ–µ—Ö–∞–ª /"
        "–≤–µ—Ä–Ω—É–ª—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∫ –ø—Ä–æ–¥–∞–≤—Ü—É –∏ —Ç–¥) –ª–µ–∂–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ."
        "\n\n–°–æ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –º—ã –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≥—Ä—É–∑–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –†–§."
        "\n\n<b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?</b>"
    )
    await message.answer(text, reply_markup=keyboards.cargo1, parse_mode="html")


@router.callback_query(F.data == "cargo/1/yes")
async def route(callback: CallbackQuery):
    text = (
        "–ù—É —á—Ç–æ –∂, –¥–∞–≤–∞–π —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏. –¢–∞—Ä–∏—Ñ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞, "
        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º, –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≥—Ä—É–∑–∞. –¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏"
    )
    await callback.message.answer(text, reply_markup=keyboards.cargo2)


@router.callback_query(F.data == "cargo/2/costs")
async def route(callback: CallbackQuery):
    text = (
        "<b>1.</b> –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ - 2% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥—Ä—É–∑–∞ <i>(–æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –ø–æ –∂–µ–ª–∞–Ω–∏—é)</i>. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–Ω–∞—è "
        "–≤–∞–º–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å 10.000 —é–∞–Ω–µ–π, —Ç–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ–±–æ–π–¥–µ—Ç—Å—è –≤—Å–µ–≥–æ –≤ 200 —é–∞–Ω–µ–π.\n\n"
        "<b>2.</b> –ü—Ä–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥—Ä—É–∑–∞ –æ—Ç $50 –¥–æ $99 –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º, —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 2.5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏.\n\n"
        "<b>3.</b> –¢–æ–≤–∞—Ä, —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –æ—Ç $100 –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º –∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è!\n\n"
        "<b>4.</b> –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ç–µ—Ä—é, –∫—Ä–∞–∂—É, –∫–æ–Ω—Ñ–∏—Å–∫–∞—Ü–∏—é –≥—Ä—É–∑–∞.\n\n"
        "<b>5.</b> –ï—Å–ª–∏ –≤–∞—à —Ç–æ–≤–∞—Ä –Ω–µ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω, —Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑–∞ –Ω–µ –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç—Å—è.\n\n"
        "<strong>–î–µ–ª–∞–µ–º —Å—Ç—Ä–∞—Ö–æ–≤–∫—É?</strong>"
    )
    await callback.message.answer(text, reply_markup=keyboards.cargo3, parse_mode="html")


@router.callback_query(F.data == "cargo/3/yes")
async def route(callback: CallbackQuery):
    text = "–ò–∑–≤–µ—Å—Ç–Ω–∞ –ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑–∞?"
    await callback.message.answer(text, reply_markup=keyboards.cargo4)


@router.callback_query(F.data == "cargo/4/yes")
async def route(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Cargo.price)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑–∞.")


@router.message(Cargo.price)
async def route(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.set_state(Cargo.price_per_kilogram)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏, –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑–∞ –Ω–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º.")


@router.message(Cargo.price_per_kilogram)
async def route(message: Message, state: FSMContext):
    await state.update_data(price_per_kilogram=message.text)
    await state.set_state(Cargo.price_per_kilogram)

    # data = await state.get_data()  #
    # await state.clear()  #

    text1 = (
        "–û–±—Ä–µ—à–µ—Ç–∫–∞ - 150 —é–∞–Ω–µ–π –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä –≥—Ä—É–∑–∞. –û–±—Ä–µ—à–µ—Ç–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç 2 –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ "
        "(—Ç–æ –µ—Å—Ç—å –µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å - 300 —é–∞–Ω–µ–π).\n\n"
        "<b>–û–±—Ä–µ—à–µ—Ç–∫–∞ –≥—Ä—É–∑–∞</b> ‚Äì —ç—Ç–æ –º–µ—Ç–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –≥—Ä—É–∑ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–≥–æ –∫–∞—Ä–∫–∞—Å–∞ "
        "<i>(–æ–±—Ä–µ—à–µ—Ç–∫–∏)</i>, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –µ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.\n–û–±—Ä–µ—à–µ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "
        "–¥–ª—è –∑–∞—â–∏—Ç—ã —Ö—Ä—É–ø–∫–∏—Ö, —Ç—è–∂–µ–ª—ã—Ö –∏–ª–∏ –Ω–µ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π, –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π –≤–Ω–µ—à–Ω–µ–π —Å—Ä–µ–¥—ã "
        "–∏ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫.\n\n"
    )
    await message.answer(text1, parse_mode="html")

    text2 = "<b>–°–∫–æ—Ç—á</b> - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Å–∫–æ—Ç—á–∏—Ç—å –∫–æ—Ä–æ–±–∫—É —Å–≤–µ—Ä—Ö—É - 10 —é–∞–Ω–µ–π / –∫–æ—Ä–æ–±–∫–∞.\n\n"
    await message.answer(text2, parse_mode="html")

    text3 = (
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É –º—ã –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ—Å—å–±–µ –∫–ª–∏–µ–Ω—Ç–∞.\n\n–ï—Å–ª–∏ –æ—Ç –í–∞—Å –Ω–µ –±—ã–ª–æ –ø—Ä–æ—Å—å–±—ã –∏ –ø—Ä–∏ "
        "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –≤–∞—à –≥—Ä—É–∑ —Å–ª–æ–º–∞–ª—Å—è, –ø–æ–º—è–ª—Å—è, —Ä–∞–∑–±–∏–ª—Å—è, –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –º—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º.\n\n<b>–ß—Ç–æ –¥–µ–ª–∞–µ–º?</b>"
    )
    await message.answer(text3, parse_mode="html", reply_markup=keyboards.cargo5)


@router.callback_query(lambda c: c.data in ["cargo/3/no", "cargo/4/no"])
async def route(callback: CallbackQuery):
    text1 = (
        "–û–±—Ä–µ—à–µ—Ç–∫–∞ - 150 —é–∞–Ω–µ–π –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä –≥—Ä—É–∑–∞. –û–±—Ä–µ—à–µ—Ç–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç 2 –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ "
        "(—Ç–æ –µ—Å—Ç—å –µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å - 300 —é–∞–Ω–µ–π).\n\n"
        "<b>–û–±—Ä–µ—à–µ—Ç–∫–∞ –≥—Ä—É–∑–∞</b> ‚Äì —ç—Ç–æ –º–µ—Ç–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –≥—Ä—É–∑ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–≥–æ –∫–∞—Ä–∫–∞—Å–∞ "
        "<i>(–æ–±—Ä–µ—à–µ—Ç–∫–∏)</i>, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –µ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.\n–û–±—Ä–µ—à–µ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "
        "–¥–ª—è –∑–∞—â–∏—Ç—ã —Ö—Ä—É–ø–∫–∏—Ö, —Ç—è–∂–µ–ª—ã—Ö –∏–ª–∏ –Ω–µ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π, –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π –≤–Ω–µ—à–Ω–µ–π —Å—Ä–µ–¥—ã "
        "–∏ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫.\n\n"
    )

    await callback.message.answer(text1, parse_mode="html")

    text2 = "<b>–°–∫–æ—Ç—á</b> - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Å–∫–æ—Ç—á–∏—Ç—å –∫–æ—Ä–æ–±–∫—É —Å–≤–µ—Ä—Ö—É - 10 —é–∞–Ω–µ–π / –∫–æ—Ä–æ–±–∫–∞.\n\n"
    await callback.message.answer(text2, parse_mode="html")

    text3 = (
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É –º—ã –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ—Å—å–±–µ –∫–ª–∏–µ–Ω—Ç–∞.\n\n–ï—Å–ª–∏ –æ—Ç –í–∞—Å –Ω–µ –±—ã–ª–æ –ø—Ä–æ—Å—å–±—ã –∏ –ø—Ä–∏ "
        "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –≤–∞—à –≥—Ä—É–∑ —Å–ª–æ–º–∞–ª—Å—è, –ø–æ–º—è–ª—Å—è, —Ä–∞–∑–±–∏–ª—Å—è, –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –º—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º.\n\n<b>–ß—Ç–æ –¥–µ–ª–∞–µ–º?</b>"
    )
    await callback.message.answer(text3, parse_mode="html", reply_markup=keyboards.cargo5)


@router.callback_query(lambda c: c.data in ["cargo/5/box", "cargo/5/scotch", "cargo/5/also"])
async def route(callback: CallbackQuery):
    text = (
        "–° –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —Ç–æ–≤–∞—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ–º?\n\n–í–Ω–∏–º–∞–Ω–∏–µ!!! —Ç–æ–≤–∞—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–º–µ—à–∏–≤–∞—Ç—å –Ω–µ–ª—å–∑—è!\n–¢–æ–≤–∞—Ä—ã —Ä–∞–∑–Ω—ã—Ö "
        "—Ç–∏–ø–æ–≤ —Å—á–∏—Ç–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ!\n–ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω—ã "
        "–Ω–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—ã–ª–∏ —Å–º–µ—à–∞–Ω—ã!"
    )
    await callback.message.answer(text, parse_mode="html")

    categories = [
        {
            "title": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1",
            "content": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
        },
        {
            "title": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2",
            "content": [
                "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –≤–µ—Å—ã üìä",
                "–ü—ã–ª–µ—Å–æ—Å—ã üßπ",
                "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –±—Ä–∏—Ç–≤—ã ü™í",
                "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—Ç—é–≥–∏ üß∫",
                "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤—ã–µ –ø–µ—á–∏ üç≤",
                "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥—É—Ö–æ–≤–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã üçû",
                "–§–µ–Ω—ã üí®",
                "–ü–ª–æ–π–∫–∏ üíá‚Äç‚ôÄÔ∏è",
                "–ö—É–ª–µ—Ä—ã –¥–ª—è –≤–æ–¥—ã üö∞",
                "–í–µ–±-–∫–∞–º–µ—Ä—ã üì∑",
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏—Å–ø–µ–Ω—Å–µ—Ä—ã –¥–ª—è –º—ã–ª–∞ üßº",
                "–†–æ—É—Ç–µ—Ä—ã üì°",
                "–ü—Ä–∏–Ω—Ç–µ—Ä—ã üñ®Ô∏è",
                "Wi-Fi —Ä–æ—É—Ç–µ—Ä—ã üåê",
                "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç—ã ‚åö",
                "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∑—É–±–Ω—ã–µ —â–µ—Ç–∫–∏",
                "–î–∞—Ç–∞-–∫–∞–±–µ–ª–∏ üîå",
                "–ó–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ üîã",
                "–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã üéÆ",
                "–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ üïπÔ∏è",
                "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∑–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ üöóüîå",
                "–¢–í-–ø—Ä–∏—Å—Ç–∞–≤–∫–∏ üì∫",
                "–°—É—à–∏–ª–∫–∏ üå¨Ô∏è",
                "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∏–ª–∫–∏ –¥–ª—è –Ω–æ–∂–µ–π üî™",
                "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã –¥–ª—è –≤—ã—Ç—è–∂–∫–∏ üå™Ô∏è",
                "–†–∞–¥–∏–∞—Ç–æ—Ä—ã üî•",
                "–ü—É–ª—å—Ç—ã –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è üéõÔ∏è",
                "–ú–∞—Å—Å–∞–∂—ë—Ä—ã üíÜ",
                "–ú–æ–Ω–∏—Ç–æ—Ä—ã üñ•Ô∏è",
                "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —á–∞–π–Ω–∏–∫–∏ ‚òï",
                "–õ–∞–∑–µ—Ä–Ω—ã–µ –¥–∞–ª—å–Ω–æ–º–µ—Ä—ã –¥–ª—è –¥–æ–º–∞ üìè",
                "–¢–µ—Ä–º–æ–º–µ—Ç—Ä—ã üå°Ô∏è",
                "DVD-–ø–ª–µ–µ—Ä—ã üìÄ",
                "–î—Ä—É–≥–∏–µ –º–µ–ª–∫–∏–µ –±—ã—Ç–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã üè†",
            ],
        },
        {
            "title": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 3",
            "content": [
                "–°—É–º–∫–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Å—É–º–æ–∫ üëú",
                "–®–ª—è–ø—ã üé©",
                "–ö–æ—Å–º–µ—Ç–∏–∫–∞ üíÑ",
                "–ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è üå∏",
                "–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π üß¥",
                "–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞ üíÖ",
                "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ üì±",
                "–ß–µ—Ö–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π üöó",
                "–ù–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π üöô",
                "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã üõ†Ô∏è",
                "–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏ ‚öôÔ∏è",
                "–ö–æ–ª–µ—Å–Ω—ã–µ –¥–∏—Å–∫–∏ üöò",
                "–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –æ–±—É–≤–∏ üëü",
                "–°–∞–¥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã üåø",
                "–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –ø–æ—Å—É–¥–∞ üçΩÔ∏è",
            ],
        },
        {
            "title": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 4",
            "content": [
                "–ù–æ—Å–∫–∏ üß¶",
                "–ö–æ–ª–≥–æ—Ç–∫–∏ ü©≤",
                "–ß—É–ª–∫–∏ üß¶",
                "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã üìé",
                "–ó–æ–Ω—Ç—ã ‚òÇÔ∏è",
                "–ü–æ—Å—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ üõèÔ∏è",
                "–ú–µ–±–µ–ª—å üõãÔ∏è",
                "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã üö≤",
                "–†–∞–±–æ—á–∏–µ –ø–µ—Ä—á–∞—Ç–∫–∏ üß§",
                "–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏ üí°",
                "–ü–∞–ª–∞—Ç–∫–∏ ‚õ∫",
                "–ö—É—Ö–æ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ üçΩÔ∏è",
                "–°–∞–º–æ–∫–∞—Ç—ã üõ¥",
                "–ò–≥—Ä—É—à–∫–∏ üé≤",
            ],
        },
    ]

    def category_format(items):
        if type(items) is list:
            items_out = "\n".join(items)
            return items_out
        else:
            return items

    categories_out = list(map(
        lambda category: f'<strong>{category["title"]}</strong>\n' + category_format(category["content"]), categories
    ))
    categories_out = "\n\n".join(categories_out)
    await callback.message.answer(categories_out, parse_mode="html")

    info = (
        "—Ü–µ–Ω–∞ –æ—Ç ... –¥–æ ... –∑–∞ –∫–≥. –ë–æ–ª–µ–µ —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å  –ø–æ —Ç–∞–±–ª–∏—Ü–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏. "
        "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–∑–∞ –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ –í–µ—Å/–û–±—ä—ë–º . –ß–µ–º –≤—ã—à–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å , —Ç–µ–º –¥–µ—à–µ–≤–ª–µ —Ç–∞—Ä–∏—Ñ."
    )
    await callback.message.answer(info, parse_mode="html", reply_markup=keyboards.cargo6)


@router.callback_query(F.data == "cargo/6/help")
async def route(callback: CallbackQuery, state: FSMContext):
    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å."
    await state.set_state(Help.text)
    await callback.message.answer(text, parse_mode="html")


@router.message(Help.text)
async def route(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.set_state(Help.contact)
    await message.answer("–ö–∞–∫ —Å —Ç–æ–±–æ–π –ª—É—á—à–µ —Å–≤—è–∑–∞—Ç—å—Å—è?")


@router.message(Help.contact)
async def route(message: Message):
    text = "–°–ø–∞—Å–∏–±–æ! –º—ã –≤–µ—Ä–Ω–µ–º—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    await message.answer(text)
